---
AWSTemplateFormatVersion: "2010-09-09"
Description: Resources to run application 
Parameters:
  TemplateRepoURL:
    Description: URL of S3 bucket with templates
    Type: String
    Default: https://infra-utility-cfnrepository-104dtnuvpb4bk.s3-ap-southeast-1.amazonaws.com
  NetworkStack:
    Description: The stack name to import network config from
    Type: String
    Default: infra-network
  DataStack:
    Description: The stack name to import data layer config from
    Type: String
    Default: infra-db
  CidrBlock1:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: CIDR Block for Subnet1.
    Type: String
    Default: 10.100.0.0/24
  CidrBlock2:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: CIDR Block for Subnet2.
    Type: String
    Default: 10.100.1.0/24
  CidrBlock3:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: CIDR Block for Subnet3.
    Type: String
    Default: 10.100.2.0/24
  RegionShort:
    Type: String
    Description: Regional suffix for resources
    AllowedValues:
     - apse2
     - apse1
    Default: apse1
  CompanyName:
    Type: String
    Description: Company wide prefix
    Default: "alpha"
  Service:
    Type: String
    Description: Service suffix for name tag mainly
    Default: app
  ServicePort:
    Type: Number
    MinValue: 1024
    MaxValue: 65535
    Default: 3000
  Domain:
    Type: String
    Description: Domain name the service would operate under
    Default: examples.ifm.tools
  RegistryURL:
    Type: String
    Description: Registry URL we intend to use within the project
  MinContainers:
    Type: Number
    Description: Minimum number of running container instances
    Default: 2
  MaxContainers: 
    Type: Number
    Description: Maximum number of running container instances
    Default: 10

Resources:
  ServicePrivateNetwork:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - "${TemplateRepoURL}/infra-private-network.template"
        - TemplateRepoURL: !Ref TemplateRepoURL
      Parameters: 
        NetworkStack: !Ref NetworkStack
        CidrBlock1: !Ref CidrBlock1
        CidrBlock2: !Ref CidrBlock2
        CidrBlock3: !Ref CidrBlock3
        RegionShort: !Ref RegionShort
        CompanyName: !Ref CompanyName
        Service: !Ref Service
      Tags: 
        - Key: Name
          Value: service-network
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ["/ecs", !Ref Service, "taskdef"]]

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:  !Join ['-', [!Ref CompanyName, 'fc', !Ref RegionShort]]
 
  ApplicationDatabaseCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Application user account for database"
      Name: !Sub "/production/${CompanyName}/data/cluster/appuser"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "servian_gtd_app"}'
        GenerateStringKey: "password"
        PasswordLength: 24
        ExcludeCharacters: '"@/\'

  SecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ApplicationDatabaseCredentials
      TargetId:
        Fn::ImportValue:
            !Sub
              - ${DataStack}-rds-cluster
              - DataStack: !Ref DataStack
      TargetType: AWS::RDS::DBCluster

# Create a user in RDS as per value in the Secrets Manager
# Supposed to be invoked via orchestrator
  PostgresTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref CompanyName, "taskdef", "postgres", !Ref RegionShort]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: 0.5GB
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: "db"
          Image: !Sub "${RegistryURL}:db"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
# We are injecting DBUSER and DBPASS into the database as a preliminary
# step in order to provide access to application
          Secrets:
            - Name: ADMINDBUSER
              ValueFrom:
                Fn::Join:
                  - ""
                  - - Fn::ImportValue:
                        !Sub 
                          - ${DataStack}-db-secrets
                          - DataStack: !Ref DataStack
                    - ":username::"
            - Name: ADMINDBPASSWORD
              ValueFrom:
                Fn::Join:
                  - ""
                  - - Fn::ImportValue:
                        !Sub 
                          - ${DataStack}-db-secrets
                          - DataStack: !Ref DataStack
                    - ":password::"
            - Name: DBUSER
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:username::"
            - Name: DBPASS
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:password::"
            - Name: DBHOST
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:host::"
            - Name: DBPORT
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:port::"
  
  SeedTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref CompanyName, "taskdef", "seed", !Ref RegionShort]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: 0.5GB
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: "dbseed"
          Image: !Sub "${RegistryURL}:app"
          Command:
            - "updatedb"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: VTT_DBUSER
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:username::"
            - Name: VTT_DBPASSWORD
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:password::"
            - Name: VTT_DBHOST
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:host::"
            - Name: VTT_DBPORT
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:port::"
  
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref CompanyName, "taskdef", !Ref Service, !Ref RegionShort]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: 0.5GB
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref Service
          Image: !Sub "${RegistryURL}:app"
          Command:
            - "serve"
          PortMappings:
            - ContainerPort: !Ref ServicePort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: VTT_DBUSER
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:username::"
            - Name: VTT_DBPASSWORD
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:password::"
            - Name: VTT_DBHOST
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:host::"
            - Name: VTT_DBPORT
              ValueFrom: !Sub "${ApplicationDatabaseCredentials}:port::"
          Environment:
            - Name: VTT_LISTENHOST
              Value: "0.0.0.0" #FIXME Can we do better here?
            - Name: VTT_LISTENPORT
              Value: !Ref ServicePort

# Cluster level role, to manage infra related tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref Service, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: "fetch-db-secrets"
          PolicyDocument: 
            Statement:
              - Effect: Allow
                Action: 
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref ApplicationDatabaseCredentials
                  - Fn::ImportValue:
                      !Sub
                        - ${DataStack}-db-secrets
                        - DataStack: !Ref DataStack

# Container level role (what container can do)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref Service, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # 
      # OR
      #
      # Policies:
      #   -

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref Service, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref FargateCluster, !GetAtt ApplicationService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['/', [!Ref Service, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 50

  ApplicationService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties: 
      ServiceName: !Ref Service
      Cluster: !Ref FargateCluster
      TaskDefinition: !Ref ApplicationTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          Subnets:
            - !GetAtt ServicePrivateNetwork.Outputs.PS1ID
            - !GetAtt ServicePrivateNetwork.Outputs.PS2ID
            - !GetAtt ServicePrivateNetwork.Outputs.PS3ID
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref Service
          ContainerPort: !Ref ServicePort
          TargetGroupArn: !Ref ServiceTargetGroup

  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Join ['-', [!Ref CompanyName, 'tg', !Ref Service, !Ref ServicePort, !Ref RegionShort]]
      Port: !Ref ServicePort
      HealthCheckIntervalSeconds: 5
      HealthCheckPort: !Ref ServicePort
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: "60"
      VpcId: 
        Fn::ImportValue:
          !Sub 
          - ${NetworkStack}-vpcid
          - NetworkStack: !Ref NetworkStack
  
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ["",[!Ref Domain, "."]]
      Comment: Service LB registration
      RecordSets:
      - Name: !Join ["",["app", ".",!Ref Domain, "."]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt LoadBalancer.DNSName

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join [".",[!Ref Service, !Ref Domain]]
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Join [".",["app", !Ref Domain]]
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application             
      Subnets:
        - !Select ["0", !Split [",", !ImportValue "infra-network-dmz-subnet-ids"]] #FIXME: hardcoded parent stack
        - !Select ["1", !Split [",", !ImportValue "infra-network-dmz-subnet-ids"]]
        - !Select ["2", !Split [",", !ImportValue "infra-network-dmz-subnet-ids"]]
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup 

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
     LoadBalancerArn: !Ref LoadBalancer
     Port: 443
     SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08
     Certificates:
       - CertificateArn: !Ref Certificate
     Protocol: "HTTPS"
     DefaultActions:
        - TargetGroupArn: !Ref ServiceTargetGroup
          Type: forward

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Service}-lb-sec-grp"
      GroupDescription: !Sub "Security group for load balancer in front of ${Service}"  
      VpcId: 
        Fn::ImportValue:
          !Sub 
          - ${NetworkStack}-vpcid
          - NetworkStack: !Ref NetworkStack
      Tags:
        - Key: Name
          Value: !Join ['/', [!Ref CompanyName, 'sg', 'loadbalancer', !Ref Service, !Ref RegionShort]]

  SecGroupLoadBalancerHttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTPS from Internet
      IpProtocol: "tcp"
      CidrIp: "0.0.0.0/0"
      FromPort: 443
      ToPort: 443
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  SecGroupLoadBalancerAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: All egress from LoadBalancer
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0" 
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Service}-sec-grp"
      GroupDescription: A security group for container instances running application
      VpcId: 
        Fn::ImportValue:
          !Sub 
          - ${NetworkStack}-vpcid
          - NetworkStack: !Ref NetworkStack
      Tags:
        - Key: Name
          Value: !Join ['/', [!Ref CompanyName, 'sg', !Ref Service, !Ref RegionShort]]
  
  SecGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow LB to application flow
      IpProtocol: tcp
      FromPort: !Ref ServicePort
      ToPort: !Ref ServicePort
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      GroupId: !GetAtt ServiceSecurityGroup.GroupId

  SecGroupApplicationAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: All egress from application instance(s)
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0" 
      GroupId: !GetAtt ServiceSecurityGroup.GroupId

Outputs:
  ApplicationSecurityGroup:
    Description: Application security group
    Value: !Ref ServiceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-application-sec-group"
  PrivateSubnets:
    Description: list of private subnet ids as JSON
    Value: !Sub "[\"${ServicePrivateNetwork.Outputs.PS1ID}\", \"${ServicePrivateNetwork.Outputs.PS2ID}\", \"${ServicePrivateNetwork.Outputs.PS3ID}\"]"
    Export:
      Name: !Sub "${AWS::StackName}-private-subnets"
  FargateCluster:
    Description: Name of Fargate cluster
    Value: !Ref FargateCluster
    Export:
      Name: !Sub "${AWS::StackName}-fargate-cluster"
  PostgresTask:
    Description: Reference to data management task
    Value: !Ref PostgresTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-postgres-task"
  SeedTask:
    Description: Reference to seed task
    Value: !Ref SeedTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-seed-task"

